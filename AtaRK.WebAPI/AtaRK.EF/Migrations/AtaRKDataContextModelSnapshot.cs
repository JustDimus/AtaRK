// <auto-generated />
using System;
using AtaRK.EF.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AtaRK.EF.Migrations
{
    [DbContext(typeof(AtaRKDataContext))]
    partial class AtaRKDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AtaRK.Core.Models.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.AccountDeviceGroup", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AccountDeviceGroup");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Setting")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("GroupId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.DeviceConfiguration", b =>
                {
                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConfigurationId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceConfiguration");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.DeviceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("DeviceGroup");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.AccountDeviceGroup", b =>
                {
                    b.HasOne("AtaRK.Core.Models.Entities.Account", "Account")
                        .WithMany("Groups")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtaRK.Core.Models.Entities.DeviceGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.Device", b =>
                {
                    b.HasOne("AtaRK.Core.Models.Entities.DeviceGroup", "Group")
                        .WithMany("Devices")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.DeviceConfiguration", b =>
                {
                    b.HasOne("AtaRK.Core.Models.Entities.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtaRK.Core.Models.Entities.Device", "Device")
                        .WithMany("Configurations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.Account", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.Device", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("AtaRK.Core.Models.Entities.DeviceGroup", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
